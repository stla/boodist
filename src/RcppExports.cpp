// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rcpp_dgumbel
Rcpp::NumericVector rcpp_dgumbel(Rcpp::NumericVector x, double a, double b, bool log);
RcppExport SEXP _boodist_rcpp_dgumbel(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_dgumbel(x, a, b, log));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_pgumbel
Rcpp::NumericVector rcpp_pgumbel(Rcpp::NumericVector q, double a, double b, bool lower);
RcppExport SEXP _boodist_rcpp_pgumbel(SEXP qSEXP, SEXP aSEXP, SEXP bSEXP, SEXP lowerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< bool >::type lower(lowerSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_pgumbel(q, a, b, lower));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_qgumbel
Rcpp::NumericVector rcpp_qgumbel(Rcpp::NumericVector p, double a, double b, bool lower);
RcppExport SEXP _boodist_rcpp_qgumbel(SEXP pSEXP, SEXP aSEXP, SEXP bSEXP, SEXP lowerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< bool >::type lower(lowerSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_qgumbel(p, a, b, lower));
    return rcpp_result_gen;
END_RCPP
}
// gumbel_mean
double gumbel_mean(double a, double b);
RcppExport SEXP _boodist_gumbel_mean(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(gumbel_mean(a, b));
    return rcpp_result_gen;
END_RCPP
}
// gumbel_median
double gumbel_median(double a, double b);
RcppExport SEXP _boodist_gumbel_median(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(gumbel_median(a, b));
    return rcpp_result_gen;
END_RCPP
}
// gumbel_mode
double gumbel_mode(double a, double b);
RcppExport SEXP _boodist_gumbel_mode(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(gumbel_mode(a, b));
    return rcpp_result_gen;
END_RCPP
}
// gumbel_sd
double gumbel_sd(double a, double b);
RcppExport SEXP _boodist_gumbel_sd(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(gumbel_sd(a, b));
    return rcpp_result_gen;
END_RCPP
}
// gumbel_skewness
double gumbel_skewness(double a, double b);
RcppExport SEXP _boodist_gumbel_skewness(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(gumbel_skewness(a, b));
    return rcpp_result_gen;
END_RCPP
}
// gumbel_kurtosis
double gumbel_kurtosis(double a, double b);
RcppExport SEXP _boodist_gumbel_kurtosis(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(gumbel_kurtosis(a, b));
    return rcpp_result_gen;
END_RCPP
}
// gumbel_kurtosis_excess
double gumbel_kurtosis_excess(double a, double b);
RcppExport SEXP _boodist_gumbel_kurtosis_excess(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(gumbel_kurtosis_excess(a, b));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_dt
Rcpp::NumericVector rcpp_dt(Rcpp::NumericVector x, double nu, double delta);
RcppExport SEXP _boodist_rcpp_dt(SEXP xSEXP, SEXP nuSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_dt(x, nu, delta));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_pt
Rcpp::NumericVector rcpp_pt(Rcpp::NumericVector q, double nu, double delta, bool lower);
RcppExport SEXP _boodist_rcpp_pt(SEXP qSEXP, SEXP nuSEXP, SEXP deltaSEXP, SEXP lowerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower(lowerSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_pt(q, nu, delta, lower));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_qt
Rcpp::NumericVector rcpp_qt(Rcpp::NumericVector p, double nu, double delta, bool lower);
RcppExport SEXP _boodist_rcpp_qt(SEXP pSEXP, SEXP nuSEXP, SEXP deltaSEXP, SEXP lowerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower(lowerSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_qt(p, nu, delta, lower));
    return rcpp_result_gen;
END_RCPP
}
// t_mean
double t_mean(double nu, double delta);
RcppExport SEXP _boodist_t_mean(SEXP nuSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(t_mean(nu, delta));
    return rcpp_result_gen;
END_RCPP
}
// t_variance
double t_variance(double nu, double delta);
RcppExport SEXP _boodist_t_variance(SEXP nuSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(t_variance(nu, delta));
    return rcpp_result_gen;
END_RCPP
}
// t_skewness
double t_skewness(double nu, double delta);
RcppExport SEXP _boodist_t_skewness(SEXP nuSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(t_skewness(nu, delta));
    return rcpp_result_gen;
END_RCPP
}
// t_kurtosis_excess
double t_kurtosis_excess(double nu, double delta);
RcppExport SEXP _boodist_t_kurtosis_excess(SEXP nuSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(t_kurtosis_excess(nu, delta));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_dhexp
Rcpp::NumericVector rcpp_dhexp(Rcpp::NumericVector x, Rcpp::NumericVector probs, Rcpp::NumericVector rates);
RcppExport SEXP _boodist_rcpp_dhexp(SEXP xSEXP, SEXP probsSEXP, SEXP ratesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rates(ratesSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_dhexp(x, probs, rates));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_phexp
Rcpp::NumericVector rcpp_phexp(Rcpp::NumericVector q, Rcpp::NumericVector probs, Rcpp::NumericVector rates, bool lower);
RcppExport SEXP _boodist_rcpp_phexp(SEXP qSEXP, SEXP probsSEXP, SEXP ratesSEXP, SEXP lowerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type q(qSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rates(ratesSEXP);
    Rcpp::traits::input_parameter< bool >::type lower(lowerSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_phexp(q, probs, rates, lower));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_qhexp
Rcpp::NumericVector rcpp_qhexp(Rcpp::NumericVector p, Rcpp::NumericVector probs, Rcpp::NumericVector rates, bool lower);
RcppExport SEXP _boodist_rcpp_qhexp(SEXP pSEXP, SEXP probsSEXP, SEXP ratesSEXP, SEXP lowerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rates(ratesSEXP);
    Rcpp::traits::input_parameter< bool >::type lower(lowerSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_qhexp(p, probs, rates, lower));
    return rcpp_result_gen;
END_RCPP
}
// hexp_mean
double hexp_mean(Rcpp::NumericVector probs, Rcpp::NumericVector rates);
RcppExport SEXP _boodist_hexp_mean(SEXP probsSEXP, SEXP ratesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rates(ratesSEXP);
    rcpp_result_gen = Rcpp::wrap(hexp_mean(probs, rates));
    return rcpp_result_gen;
END_RCPP
}
// hexp_mode
double hexp_mode(Rcpp::NumericVector probs, Rcpp::NumericVector rates);
RcppExport SEXP _boodist_hexp_mode(SEXP probsSEXP, SEXP ratesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rates(ratesSEXP);
    rcpp_result_gen = Rcpp::wrap(hexp_mode(probs, rates));
    return rcpp_result_gen;
END_RCPP
}
// hexp_variance
double hexp_variance(Rcpp::NumericVector probs, Rcpp::NumericVector rates);
RcppExport SEXP _boodist_hexp_variance(SEXP probsSEXP, SEXP ratesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rates(ratesSEXP);
    rcpp_result_gen = Rcpp::wrap(hexp_variance(probs, rates));
    return rcpp_result_gen;
END_RCPP
}
// hexp_skewness
double hexp_skewness(Rcpp::NumericVector probs, Rcpp::NumericVector rates);
RcppExport SEXP _boodist_hexp_skewness(SEXP probsSEXP, SEXP ratesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rates(ratesSEXP);
    rcpp_result_gen = Rcpp::wrap(hexp_skewness(probs, rates));
    return rcpp_result_gen;
END_RCPP
}
// hexp_kurtosis
double hexp_kurtosis(Rcpp::NumericVector probs, Rcpp::NumericVector rates);
RcppExport SEXP _boodist_hexp_kurtosis(SEXP probsSEXP, SEXP ratesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rates(ratesSEXP);
    rcpp_result_gen = Rcpp::wrap(hexp_kurtosis(probs, rates));
    return rcpp_result_gen;
END_RCPP
}
// hexp_kurtosis_excess
double hexp_kurtosis_excess(Rcpp::NumericVector probs, Rcpp::NumericVector rates);
RcppExport SEXP _boodist_hexp_kurtosis_excess(SEXP probsSEXP, SEXP ratesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rates(ratesSEXP);
    rcpp_result_gen = Rcpp::wrap(hexp_kurtosis_excess(probs, rates));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_dig
Rcpp::NumericVector rcpp_dig(Rcpp::NumericVector x, double mu, double lambda, bool log);
RcppExport SEXP _boodist_rcpp_dig(SEXP xSEXP, SEXP muSEXP, SEXP lambdaSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_dig(x, mu, lambda, log));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_pig
Rcpp::NumericVector rcpp_pig(Rcpp::NumericVector q, double mu, double lambda, bool lower);
RcppExport SEXP _boodist_rcpp_pig(SEXP qSEXP, SEXP muSEXP, SEXP lambdaSEXP, SEXP lowerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower(lowerSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_pig(q, mu, lambda, lower));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_qig
Rcpp::NumericVector rcpp_qig(Rcpp::NumericVector p, double mu, double lambda, bool lower);
RcppExport SEXP _boodist_rcpp_qig(SEXP pSEXP, SEXP muSEXP, SEXP lambdaSEXP, SEXP lowerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower(lowerSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_qig(p, mu, lambda, lower));
    return rcpp_result_gen;
END_RCPP
}
// ig_mean
double ig_mean(double mu, double lambda);
RcppExport SEXP _boodist_ig_mean(SEXP muSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(ig_mean(mu, lambda));
    return rcpp_result_gen;
END_RCPP
}
// ig_median
double ig_median(double mu, double lambda);
RcppExport SEXP _boodist_ig_median(SEXP muSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(ig_median(mu, lambda));
    return rcpp_result_gen;
END_RCPP
}
// ig_mode
double ig_mode(double mu, double lambda);
RcppExport SEXP _boodist_ig_mode(SEXP muSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(ig_mode(mu, lambda));
    return rcpp_result_gen;
END_RCPP
}
// ig_variance
double ig_variance(double mu, double lambda);
RcppExport SEXP _boodist_ig_variance(SEXP muSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(ig_variance(mu, lambda));
    return rcpp_result_gen;
END_RCPP
}
// ig_skewness
double ig_skewness(double mu, double lambda);
RcppExport SEXP _boodist_ig_skewness(SEXP muSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(ig_skewness(mu, lambda));
    return rcpp_result_gen;
END_RCPP
}
// ig_kurtosis
double ig_kurtosis(double mu, double lambda);
RcppExport SEXP _boodist_ig_kurtosis(SEXP muSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(ig_kurtosis(mu, lambda));
    return rcpp_result_gen;
END_RCPP
}
// ig_kurtosis_excess
double ig_kurtosis_excess(double mu, double lambda);
RcppExport SEXP _boodist_ig_kurtosis_excess(SEXP muSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(ig_kurtosis_excess(mu, lambda));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_boodist_rcpp_dgumbel", (DL_FUNC) &_boodist_rcpp_dgumbel, 4},
    {"_boodist_rcpp_pgumbel", (DL_FUNC) &_boodist_rcpp_pgumbel, 4},
    {"_boodist_rcpp_qgumbel", (DL_FUNC) &_boodist_rcpp_qgumbel, 4},
    {"_boodist_gumbel_mean", (DL_FUNC) &_boodist_gumbel_mean, 2},
    {"_boodist_gumbel_median", (DL_FUNC) &_boodist_gumbel_median, 2},
    {"_boodist_gumbel_mode", (DL_FUNC) &_boodist_gumbel_mode, 2},
    {"_boodist_gumbel_sd", (DL_FUNC) &_boodist_gumbel_sd, 2},
    {"_boodist_gumbel_skewness", (DL_FUNC) &_boodist_gumbel_skewness, 2},
    {"_boodist_gumbel_kurtosis", (DL_FUNC) &_boodist_gumbel_kurtosis, 2},
    {"_boodist_gumbel_kurtosis_excess", (DL_FUNC) &_boodist_gumbel_kurtosis_excess, 2},
    {"_boodist_rcpp_dt", (DL_FUNC) &_boodist_rcpp_dt, 3},
    {"_boodist_rcpp_pt", (DL_FUNC) &_boodist_rcpp_pt, 4},
    {"_boodist_rcpp_qt", (DL_FUNC) &_boodist_rcpp_qt, 4},
    {"_boodist_t_mean", (DL_FUNC) &_boodist_t_mean, 2},
    {"_boodist_t_variance", (DL_FUNC) &_boodist_t_variance, 2},
    {"_boodist_t_skewness", (DL_FUNC) &_boodist_t_skewness, 2},
    {"_boodist_t_kurtosis_excess", (DL_FUNC) &_boodist_t_kurtosis_excess, 2},
    {"_boodist_rcpp_dhexp", (DL_FUNC) &_boodist_rcpp_dhexp, 3},
    {"_boodist_rcpp_phexp", (DL_FUNC) &_boodist_rcpp_phexp, 4},
    {"_boodist_rcpp_qhexp", (DL_FUNC) &_boodist_rcpp_qhexp, 4},
    {"_boodist_hexp_mean", (DL_FUNC) &_boodist_hexp_mean, 2},
    {"_boodist_hexp_mode", (DL_FUNC) &_boodist_hexp_mode, 2},
    {"_boodist_hexp_variance", (DL_FUNC) &_boodist_hexp_variance, 2},
    {"_boodist_hexp_skewness", (DL_FUNC) &_boodist_hexp_skewness, 2},
    {"_boodist_hexp_kurtosis", (DL_FUNC) &_boodist_hexp_kurtosis, 2},
    {"_boodist_hexp_kurtosis_excess", (DL_FUNC) &_boodist_hexp_kurtosis_excess, 2},
    {"_boodist_rcpp_dig", (DL_FUNC) &_boodist_rcpp_dig, 4},
    {"_boodist_rcpp_pig", (DL_FUNC) &_boodist_rcpp_pig, 4},
    {"_boodist_rcpp_qig", (DL_FUNC) &_boodist_rcpp_qig, 4},
    {"_boodist_ig_mean", (DL_FUNC) &_boodist_ig_mean, 2},
    {"_boodist_ig_median", (DL_FUNC) &_boodist_ig_median, 2},
    {"_boodist_ig_mode", (DL_FUNC) &_boodist_ig_mode, 2},
    {"_boodist_ig_variance", (DL_FUNC) &_boodist_ig_variance, 2},
    {"_boodist_ig_skewness", (DL_FUNC) &_boodist_ig_skewness, 2},
    {"_boodist_ig_kurtosis", (DL_FUNC) &_boodist_ig_kurtosis, 2},
    {"_boodist_ig_kurtosis_excess", (DL_FUNC) &_boodist_ig_kurtosis_excess, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_boodist(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
